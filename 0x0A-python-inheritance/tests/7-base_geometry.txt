The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

Import BaseGeometry class from the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

area method:
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented

Try area method with more arguments than expected:
    >>> bg.area(98)
    Traceback (most recent call last):
        ...
    TypeError: area() takes 1 positional argument but 2 were given

Try normal number:
    >>> bg.integer_validator("my_int", 12)

Try to pass string to the second argument:
    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Try to pass zero to the second argument:
    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
        ...
    ValueError: name must be greater than 0

Try to pass negative number to the second argument:
    >>> bg.integer_validator("name", -4)
    Traceback (most recent call last):
        ...
    ValueError: name must be greater than 0

Try to pass float number to the second argument:
    >>> bg.integer_validator("name", 2.4)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Try to pass list to the second argument:
    >>> bg.integer_validator("name", [98])
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Try to pass tuple to the second argument:
    >>> bg.integer_validator("name", (98, 1))
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Try to pass dictionary to the second argument:
    >>> bg.integer_validator("name", {"num", 98})
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Try to pass boolean value to the second argument:
    >>> bg.integer_validator("name", True)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Try to pass None to the second argument:
    >>> bg.integer_validator("name", None)
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

Try to pass None as argument:
    >>> bg.integer_validator(None)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Try to pass empty arguments:
    >>> bg.integer_validator()
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Try one missing argument:
    >>> bg.integer_validator("name")
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Try too many arguments:
    >>> bg.integer_validator("name", 2, 1)
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given
